<ClassDefinitions>
	<!-- 
		This file is embedded into the GMX swf, and is used by the "GMXComponentProperites.as" class
		in order to provide GMX with a mapping between a component label and the actual component class as
		well as giving GMXBuilder and ComponentToolBox with all of the information necessary
		to allow the user (in edit mode) to 
			1) add child components to containers (the ComponentToolBox contains a button for each 
			   component in this ClassDefinitions.xml file).
			2) upon selecting a component in a layout, editing the attributes of that component.  This
			   is done in the AttributeEditToolBox class.  NOTE that the AttributeEditToolBox takes some
			   cues from a component's entry in this document in order to determine which type of interactive
			   component to put in the ToolBox for editing each specific attribute:
				- If the first word in an attribute node is boolean (e.g. "<wordWrap>Boolean ... </wordWrap>)
				  then a CheckBox component is put in the AttributeEditToolBox for that attribute
				- If there is an "array" of pipe-separated values anywhere in the description 
				  (e.g. "<fontWeight>String ... [normal|bold]</fontWeight>" ) then a ComboBox component is
				  used in the AttributeEditToolBox.  Note that the description must have the "[" and "]" characters
				  with any number of pipe-delimited String values for this to work.
				- For all other attributes, TextBox is used in the AttributeEditToolBox.
				
		The following is the format that must be used.  Items in curly braces are descriptions of what must
		be put in place of the curly brace and its contents
		
		<{COMPONENT CLASS NAME} package="{COMPONENT PACKAGE}" 
		                        label="{LABEL USED IN LAYOUT XML TO IDENTIFY THIS COMPONENT}" 
								container="{true or false : WHETHER THE COMPONENT CAN HAVE CHILD COMPONENTS}"
								group="{THE NAME OF THE GROUP IN THE COMPONENT TOOLBAR (right side of edit mode) THAT WILL CONTAIN A BUTTON FOR ADDING THIS COMPONENT}">
			<{ATTRIBUTE NAME}>{DATATYPE ... DESCRIPTION OF ATTRIBUTE}</{ATTRIBUTE NAME}>
			(add any number of attributes)
			<SampleXML>
				<{LABEL USED IN LAYOUT XML TO IDENTIFY THIS COMPONENT} {OPTIONAL DEFAULT ATTRIBUTES, e.g. width="30mm"}>
					(add any default children--e.g. as done in CheckBoxHierarchicalGroup)
				</{LABEL USED IN LAYOUT XML TO IDENTIFY THIS COMPONENT}>
			</SampleXML>
		</{COMPONENT CLASS NAME}>
	-->
	
	
	<!-- ============================================================================ -->
	<!-- ========================== GENERIC COMPONENTS ============================== -->
	<!-- ============================================================================ -->
	<Button_X package="generics" label="Button" container="false" group="Gen_Input">
		<ruid>String</ruid>
		<fid>String</fid>
		<icon>String ... see Icon List for options (for testing purposes, you may use 'skull', 'skull2', 'skull3', 'skull4', or 'skull5')</icon>
		<label>String ... label shown on the button</label>
		<sendButton>Boolean ... default='true' true|false whether the button ever initiates a message.  Note that it will stillchange its field value when interacted with (if it's a toggle button)</sendButton>
		<sendMessage>Boolean ... default='true' true|false whether the button ever initiates a message.  Note that it will still change its field value when interacted with (if it's a toggle button)</sendMessage>
		<SampleXML>
			<Button/>
		</SampleXML>
	</Button_X>
	
	<SendButton_X package="generics" label="SendButton" container="false" group="Gen_Input">
	</SendButton_X>
	
	<PushButton_X package="generics" label="PushButton" container="false" group="Gen_Input">
		<repeatDelay>Number ... time between the initial mouse down and the firing of repeating click events in milliseconds</repeatDelay>
		<repeatInterval>Number ... time between 'click' events in milliseconds</repeatInterval>
		<ruid>String</ruid>
		<fid>String</fid>
		<icon>String ... see Icon List for options (for testing purposes, you may use 'skull', 'skull2', 'skull3', 'skull4', or 'skull5')</icon>
		<label1>String ... text for top half of the button (only for certain sizes of button--see WMI spec)</label1>
		<label2>String ... text for bottom half of the button (only for certain sizes of button--see WMI spec)</label2>
		<sendButton>Boolean ... default='true' true|false whether the button ever initiates a message.  Note that it will still change its field value when interacted with (if it's a toggle button)</sendButton>
		<sendMessage>Boolean ... default='true' true|false whether the button ever initiates a message.  Note that it will still change its field value when interacted with (if it's a toggle button)</sendMessage>
		<size>String ... [lowRiseSmall|lowRiseMedium|lowRiseMediumTextAndIcon|lowRiseLarge|lowRiseLargeTextAndIcon|lowRiseDouble|lowRiseDoubleTextAndIcon|small|mediumIcon|mediumText|mediumTextAndIcon|largeText|largeTextAndIcon|double|doubleTextAndIcon|ccMini|ccLowRiseSmall|ccLowRiseMedium|ccLowRiseLarge|ccSmall|ccSmallText2|ccSmallTextAndIcon|ccSmallText2AndIcon|ccMedium|ccMediumText|ccMediumText2|ccFilter|ccDoubleText2|ccDoubleTextAndIcon|ccDoubleText2AndIcon|ccLargeText2|ccLargeTextAndIcon|ccLargeText2AndIcon|ccTabText|ccTabText2|ccExtraLarge]   See WMI Spec or WMI CC Spec for more details</size>
		<text>String ... same as label above</text>
		<type>String ... [default|network]</type>
		<iconX>Number ... explicitly sets the icon x location (if that size has an icon)</iconX>
		<iconY>Number ... explicitly sets the icon y location (if that size has an icon)</iconY>
		<iconWidth>Number ... explicitly sets the icon width (if that size has an icon)</iconWidth>
		<iconHeight>Number ... explicitly sets the icon height (if that size has an icon)</iconHeight>
		<SampleXML>
			<PushButton/>
		</SampleXML>
	</PushButton_X> 
	
	<ToggleButtonGroup_X package="generics" label="ToggleButtonGroup" container="true" group="Gen_Input">
		<ruid>String</ruid>
		<backgroundColor>String ... in hexadecimal format (e.g. 'ff0000' for red)</backgroundColor>
		<backgroundImage>String ... file name (must be in './assets/' folder) of the image to be displayed</backgroundImage>
		<SampleXML>
			<ToggleButtonGroup width="100" height="100" backgroundColor="00ff00"/>
		</SampleXML>
	</ToggleButtonGroup_X>

	<ToggleButton_X package="generics" label="ToggleButton" container="false" group="Gen_Input">
		<ruid>String</ruid>
		<fid>String</fid>
		<icon>String ... see Icon List for options (for testing purposes, you may use 'skull', 'skull2', 'skull3', 'skull4', or 'skull5')</icon>
		<label1>String ... text for top half of the button (only for certain sizes of button--see WMI spec)</label1>
		<label2>String ... text for bottom half of the button (only for certain sizes of button--see WMI spec)</label2>
		<sendButton>Boolean ... default='true' true|false whether the button ever initiates a message.  Note that it will still change its field value when interacted with (if it's a toggle button)</sendButton>
		<sendMessage>Boolean ... default='true' true|false whether the button ever initiates a message.  Note that it will still change its field value when interacted with (if it's a toggle button)</sendMessage>
		<size>String ... [lowRiseSmall|lowRiseMedium|lowRiseMediumTextAndIcon|lowRiseLarge|lowRiseLargeTextAndIcon|lowRiseDouble|lowRiseDoubleTextAndIcon|small|mediumIcon|mediumText|mediumTextAndIcon|largeText|largeTextAndIcon|double|doubleTextAndIcon|ccMini|ccLowRiseSmall|ccLowRiseMedium|ccLowRiseLarge|ccSmall|ccSmallText2|ccSmallTextAndIcon|ccSmallText2AndIcon|ccMedium|ccMediumText|ccMediumText2|ccFilter|ccDoubleText2|ccDoubleTextAndIcon|ccDoubleText2AndIcon|ccLargeText2|ccLargeTextAndIcon|ccLargeText2AndIcon|ccTabText|ccTabText2|ccExtraLarge]   See WMI Spec or WMI CC Spec for more details</size>
		<text>String ... same as label above</text>
		<type>String ... [default|network]</type>
		<iconX>Number ... explicitly sets the icon x location (if that size has an icon)</iconX>
		<iconY>Number ... explicitly sets the icon y location (if that size has an icon)</iconY>
		<iconWidth>Number ... explicitly sets the icon width (if that size has an icon)</iconWidth>
		<iconHeight>Number ... explicitly sets the icon height (if that size has an icon)</iconHeight>
		<SampleXML>
			<ToggleButton/>
		</SampleXML>
	</ToggleButton_X>
	
	<MenuButton_X package="generics" label="MenuButton" container="false" group="Gen_Input">
		<ruid>String</ruid>
		<fid>String</fid>
		<icon>String ... see Icon List for options (for testing purposes, you may use 'skull', 'skull2', 'skull3', 'skull4', or 'skull5')</icon>
		<label>String ... label shown on the button</label>
		<sendButton>Boolean ... default='true' true|false whether the button ever initiates a message.  Note that it will stillchange its field value when interacted with (if it's a toggle button)</sendButton>
		<sendMessage>Boolean ... default='true' true|false whether the button ever initiates a message.  Note that it will still change its field value when interacted with (if it's a toggle button)</sendMessage>
		<SampleXML>
			<MenuButton>
				<InfoTag>
					<Button label="Sample1"/>					
				</InfoTag>
			</MenuButton>
		</SampleXML>
	</MenuButton_X>
	
	<SpinBox_X package="generics" label="SpinBox" container="false" group="Gen_Input">
		<ruid>String</ruid>
		<fid>String</fid>
		<min>Number</min>
		<max>Number</max>
		<division>Number</division>
		<SampleXML>
			<SpinBox ruid="spinner" fid="spinner" width="30mm" height="9mm">
				<Button icon="spinBoxDownArrow" width="9mm" height="9mm"/>
				<TextInput width="12mm" height="9mm" type="numeric"/>
				<Button icon="spinBoxUpArrow" width="9mm" height="9mm"/>
			</SpinBox>
		</SampleXML>
	</SpinBox_X>
	
	<TextArea_X package="generics" label="TextArea" container="false" group="Gen_Input">
		<ruid>String</ruid>
		<fid>String</fid>
		<text>String ... text displayed.  NOTE> This is NOT recommended for labels with a field, as the field value would always be replaced by the text, which may not be desirable. ISISRecord messages are recommended to change such values</text>
		<sendMessage>Boolean default='true' ... if false, interacting with this component will not cause a message to be sent</sendMessage>
		<wordWrap>Boolean default='true'</wordWrap>
		<restrict>String ... characters that are allowed to be entered into the TextInput (e.g. for numeric, '-.0123456789'.</restrict>
		<editable>Boolean default='true'</editable>
		<color>String ... color of the text in hexadecimal format (e.g. 'ff0000' for red)</color>
		<backgroundColor>String ... in hexadecimal format (e.g. 'ff0000' for red)</backgroundColor>
		<fontSize>Number default='12'</fontSize>
		<fontFamily>String default='Verdana'</fontFamily>
		<fontWeight>String default='normal'... [normal|bold]</fontWeight>
		<fontStyle>String default='normal'... [normal|italic]</fontStyle>
		<textAlign>String default='left' ... [left|center|right]</textAlign>
		<horizontalScrollPolicy>String [on|off|auto]</horizontalScrollPolicy>
		<verticalScrollPolicy>String [on|off|auto]</verticalScrollPolicy>
		<SampleXML>
			<TextArea/>
		</SampleXML>
	</TextArea_X>
	
	<TextInput_X package="generics" label="TextInput" container="false" group="Gen_Input">
		<ruid>String</ruid>
		<fid>String</fid>
		<text>String ... text displayed.  NOTE> This is NOT recommended for labels with a field, as the field value would always be replaced by the text, which may not be desirable. ISISRecord messages are recommended to change such values</text>
		<sendMessage>Boolean default='true' ... if false, interacting with this component will not cause a message to be sent</sendMessage>
		<displayAsPassword>Boolean default='false'</displayAsPassword>
		<restrict>String ... characters that are allowed to be entered into the TextInput (e.g. for numeric> '-.0123456789'.</restrict>
		<editable>Boolean default='true'</editable>
		<color>String ... color of the text in hexadecimal format (e.g. 'ff0000' for red)</color>
		<backgroundColor>String ... in hexadecimal format (e.g. 'ff0000' for red)</backgroundColor>
		<fontSize>Number default='12'</fontSize>
		<fontFamily>String default='Verdana'</fontFamily>
		<fontWeight>String default='normal'... [normal|bold]</fontWeight>
		<fontStyle>String default='normal'... [normal|italic]</fontStyle>
		<textAlign>String default='left' ... [left|center|right]</textAlign>
		<SampleXML>
			<TextInput/>
		</SampleXML>
	</TextInput_X>
	
	<TextAreaCumulative_X package="generics" label="TextAreaCumulative" container="false" group="Gen_Input">
		<ruid>String</ruid>
		<text>String ... text displayed.  NOTE> This is NOT recommended for labels with a field, as the field value would always be replaced by the text, which may not be desirable. ISISRecord messages are recommended to change such values</text>
		<wordWrap>Boolean default='true'</wordWrap>
		<restrict>String ... characters that are allowed to be entered into the TextInput (e.g. for numeric, '-.0123456789'.</restrict>
		<editable>Boolean default='true'</editable>
		<color>String ... color of the text in hexadecimal format (e.g. 'ff0000' for red)</color>
		<backgroundColor>String ... in hexadecimal format (e.g. 'ff0000' for red)</backgroundColor>
		<fontSize>Number default='12'</fontSize>
		<fontFamily>String default='Verdana'</fontFamily>
		<fontWeight>String default='normal'... [normal|bold]</fontWeight>
		<fontStyle>String default='normal'... [normal|italic]</fontStyle>
		<textAlign>String default='left' ... [left|center|right]</textAlign>
		<horizontalScrollPolicy>String [on|off|auto]</horizontalScrollPolicy>
		<verticalScrollPolicy>String [on|off|auto]</verticalScrollPolicy>
		<SampleXML>
			<TextAreaCumulative ruid="TextAreaCumulativeSAMPLE">
				<field fid="fid1" name="totalConversation"/>
				<field fid="fid2" name="diff"/>
				<field fid="fid3" name="readyToReceive"/>
			</TextAreaCumulative>
		</SampleXML>
	</TextAreaCumulative_X>
	
	<CheckBox_X package="generics" label="CheckBox" container="false" group="Gen_Input">
		<ruid>String</ruid>
		<fid>String</fid>
		<label>String ... text shown to the right of the check box</label>
		<text>String ... same as label above</text>
		<sendMessage>Boolean default='true' ... if false, interacting with this component will not cause a message to be sent</sendMessage>
		<fontSize>Number</fontSize>
		<glowColor>String default='ccccff' ... in hexadecimal format (e.g. 'ff0000' for red)</glowColor>
		<flexibleWidth>Boolean default='false' ... if true, the component uses the text in the label to set its size</flexibleWidth>
		<overColor>String default='9999ff' ... color displayed over the checkbox when the mouse hovers over it</overColor>
		<overAlpha>Number default='0.4' ... alpha value (out of 1.0) of the color shown when the mouse hovers over it</overAlpha>
		<buttonSize>Number default='6mm' ... makes the button a square with this dimension</buttonSize>
		<SampleXML>
			<CheckBox/>
		</SampleXML>
	</CheckBox_X>
	
	<CheckBoxHierarchicalGroup_X package="generics" label="CheckBoxHierarchicalGroup" container="false" group="Gen_Input">
		<ruid>String</ruid>
		<fid>String ... APPLIES to parent checkbox!!!</fid>
		<label>String ... APPLIES to parent checkbox!!! text shown to the right of the check box</label> 
		<text>String ... same as label above</text>
		<sendMessage>Boolean default='true' ... APPLIES to parent checkbox!!! if false, interacting with this component will not cause a message to be sent</sendMessage>
		<fontSize>Number ... APPLIES to parent checkbox!!! </fontSize>
		<glowColor>String default='ccccff' ... APPLIES to parent checkbox!!! in hexadecimal format (e.g. 'ff0000' for red)</glowColor>
		<flexibleWidth>Boolean default='false' ... APPLIES to parent checkbox!!! if true, the component uses the text in the label to set its size</flexibleWidth>
		<overColor>String default='9999ff' ... APPLIES to parent checkbox!!! color displayed over the checkbox when the mouse hovers over it</overColor>
		<overAlpha>Number default='0.4' ... APPLIES to parent checkbox!!! alpha value (out of 1.0) of the color shown when the mouse hovers over it</overAlpha>
		<buttonSize>Number default='6mm' ... APPLIES to parent checkbox!!! makes the button a square with this dimension</buttonSize>
		<backgroundColor>String ... APPLIES to the group's VBox, NOT the checkbox!!! in hexadecimal format (e.g. 'ff0000' for red)</backgroundColor>
		<verticalGap>Number default='2mm' ... APPLIES to the group's VBox, NOT the checkbox!!! gap b/w components in the TitleBar</verticalGap>
		<horizontalAlign>String default='left' ... APPLIES to the group's VBox, NOT the checkbox!!! [left|center|right]</horizontalAlign>
		<title>String ... APPLIES to the group's VBox, NOT the checkbox!!! creates a pre-formatted title and box around the component</title>
		<SampleXML>
			<CheckBoxHierarchicalGroup ruid="checkBoxGroupRuid" label="Sample Parent Label" flexibleWidth="true" width="30mm" height="25mm">
				<CheckBox fid="sampleCheck1" flexibleWidth="true" label="Sample 1"/>
				<CheckBox fid="sampleCheck2" flexibleWidth="true" label="Sample 2"/>
			</CheckBoxHierarchicalGroup>
		</SampleXML>
	</CheckBoxHierarchicalGroup_X>
	
	<ComboBoxSingleField_X package="generics" label="ComboBoxSingleField" container="false" group="Gen_Input">
		<ruid>String</ruid>
		<fid>String</fid>
		<dataProvider>Array of String ... pipe-delimited strings used to populate the options in the drop-down.</dataProvider>
		<referenceItemIndex>Boolean ... if true, the field contains and uses the index instead of the label to identify the selected object.</referenceItemIndex>
		<sendMessage>Boolean default='true' ... if false, interacting with this component will not cause a message to be sent</sendMessage>
		<default>String ... the default selected field label. NOT recommended unless you want the ComboBox to always change its field's value to this every time this layout comes in.  ISISRecord messages are recommended instead.</default>
		<rowCount>uint default='5'... the number of rows visible in the dropdown list</rowCount>
		<color>String ... color of the text in hexadecimal format (e.g. 'ff0000' for red)</color>
		<fontSize>Number default='12'</fontSize>
		<fontFamily>String default='Verdana'</fontFamily>
		<fontWeight>String default='normal'... [normal|bold]</fontWeight>
		<fontStyle>String default='normal'... [normal|italic]</fontStyle>
		<textAlign>String default='left' ... [left|center|right]</textAlign>
		<SampleXML>
			<ComboBoxSingleField dataProvider="Option 1|Option 2|Option 3"/>
		</SampleXML>
	</ComboBoxSingleField_X>
	
	<ComboBox_X package="generics" label="ComboBox" container="false" group="Gen_Input">
		<cuid>String REQUIRED</cuid>
		<ruid>String</ruid>
		<fid>String</fid>
		<referenceItemIndex>Boolean ... if true, the field contains and uses the index instead of the label to identify the selected object.</referenceItemIndex>
		<sendField>Boolean default='false' ... [true|both|false]. true = the ComboBox sends its field and the associated record instead of sending the record in the collection that was selected.  both = sends both its field and the record in the collection.  false = sends only the record in the collection.</sendField>
		<sendMessage>Boolean default='true' ... if false, interacting with this component will not cause a message to be sent</sendMessage>
		<default>String ... the default selected field label. NOT recommended unless you want the ComboBox to always change its field's value to this every time this layout comes in.  ISISRecord messages are recommended instead.</default>
		<rowCount>uint default='5'... the number of rows visible in the dropdown list</rowCount>
		<color>String ... color of the text in hexadecimal format (e.g. 'ff0000' for red)</color>
		<fontSize>Number default='12'</fontSize>
		<fontFamily>String default='Verdana'</fontFamily>
		<fontWeight>String default='normal'... [normal|bold]</fontWeight>
		<fontStyle>String default='normal'... [normal|italic]</fontStyle>
		<textAlign>String default='left' ... [left|center|right]</textAlign>
		<SampleXML>
			<ComboBox cuid="sampleCuid"/>
		</SampleXML>
	</ComboBox_X>
	
	<List_X package="generics.tables" label="List" container="false" group="Gen_Input">
		<ruid>String</ruid>
		<fid>String</fid>
		<sortableColumns>Boolean default='false'</sortableColumns>
		<resizableColumns>Boolean default='false'</resizableColumns>
		<draggableColumns>Boolean default='false'</draggableColumns>
		<showHeaders>Boolean default='true'</showHeaders>
		<verticalGridLines>Boolean default='true' ... Whether vertical grid lines are shown</verticalGridLines>
		<selectable>Boolean default='false' ... </selectable>
		<editable>Boolean default='true' ... If this property is false, it doesn't matter whether the columns have editable=true or not</editable>
		<rowCount>int ... the number of rows shown in the datagrid.</rowCount>
		<variableRowHeight>Boolean default='false' ... whether the individual rows can have different heights</variableRowHeight>
		<wordWrap>Boolean default='false' ... </wordWrap>
		<messageOnSelect>Boolean default='true' ... if true, a message is sent with the selected record when it is clicked</messageOnSelect>
		<fontFamily>String default='Verdana'</fontFamily>
		<fontSize>Number default='12'</fontSize>
		<fontWeight>String ... [normal|bold]</fontWeight>
		<color>String ... text color in hexadecimal format (e.g. 'ff0000' for red)</color>
		<SampleXML>
			<List dataProvider="Hah1|Hah2|Hah3|Hah4">                          
				<DataGridColumn dataField="heheh" headerText="Sample1" width="50"/>
			</List>
		</SampleXML>
	</List_X>
	
	<Joystick_X package="generics" label="Joystick" container="false" group="Gen_Input">
		<ruid>String</ruid>
		<stickColorOutside>String default='00bbbb' ... in hexadecimal format (e.g. 'ff0000' for red)</stickColorOutside>
		<stickColorInside>String default='000000' ... in hexadecimal format (e.g. 'ff0000' for red)</stickColorInside>
		<baseColor>String default='ffff00' ... in hexadecimal format (e.g. 'ff0000' for red)</baseColor>
		<baseDisabledColor>String default='bbbbbb' ... in hexadecimal format (e.g. 'ff0000' for red)</baseDisabledColor>
		<upText>String default='' ... text appearing at the top of the joystick (indicating up direction)</upText>
		<downText>String default='' ... text appearing at the bottom of the joystick (indicating down direction)</downText>
		<leftText>String default='' ... text appearing at the left of the joystick (indicating left direction)</leftText>
		<rightText>String default='' ... text appearing at the right of the joystick (indicating right direction)</rightText>
		<SampleXML>
			<Joystick ruid="SAMPLE">
				<field fid="fid1" name="xAxis"/>
				<field fid="fid2" name="yAxis"/>
			</Joystick>
		</SampleXML>
	</Joystick_X>
	
	<Calendar_X package="generics" label="Calendar" container="false" group="Gen_Input">
		<ruid>String</ruid>
		<fid>String</fid>
		<type>String ... [day|month|week].  Indicates what the calendar selects when the mouse is clicked on it.</type>
		<SampleXML>
			<Calendar/>
		</SampleXML>
	</Calendar_X>
	
	<ColorPicker_X package="generics" label="ColorPicker" container="false" group="Gen_Input">
		<ruid>String</ruid>
		<fid>String</fid>
		<SampleXML>
			<ColorPicker/>
		</SampleXML>
	</ColorPicker_X>
	
	<FileBrowser package="generics" label="FileBrowser" container="false" group="Gen_Input">
		<ruid>String</ruid>
		<fid>String</fid>
		<SampleXML>
			<FileBrowser/>
		</SampleXML>
	</FileBrowser>
	
	<RadioButtonGroup_X package="generics" label="RadioButtonGroup" container="false" group="Gen_Input">
		<ruid>String</ruid>
		<fid>String ... Required if the service is to send ISISRecord messages to update its value and/or if you would like to send the selected Label and not just the record (see sendField property)</fid>
		<referenceItemIndex>Boolean ... if true, the field contains and uses the index instead of the label to identify the selected object.</referenceItemIndex>
		<sendField>Boolean default='true' ... [true|both|false]. true = the ComboBox sends its field and the associated record instead of sending the record in the collection that was selected.  both = sends both its field and the record in the collection.  false = sends only the record in the collection.</sendField>
		<sendMessage>Boolean default='true' ... if false, interacting with this component will not cause a message to be sent</sendMessage>
		<SampleXML>
			<RadioButtonGroup ruid="radioRuid" fid="radioFid">
				<RadioButton label="Sample 1"/>
				<RadioButton label="Sample 2"/>
			</RadioButtonGroup>
		</SampleXML>
	</RadioButtonGroup_X>


	<RadioButton_X package="generics" label="RadioButton" container="false" group="Gen_Input">
		<SampleXML>
			<RadioButton flexibleWidth="true" label="Sample"/>
		</SampleXML>
	</RadioButton_X>
	
	<DataGrid_ISIS package="generics.tables" label="DataGrid" container="false" group="Gen_Input">
		<cuid>String</cuid>
		<ruid>String</ruid>
		<fid>String ... creates a field that contains a double-percentage (%%) delimited string containing all selected ruids</fid>
		<referenceItemIndex>Boolean default='false'... if true, the field contains and uses the index instead of the label to identify the selected object.</referenceItemIndex>
		<allowMultipleSelection>Boolean default='false'</allowMultipleSelection>
		<sortableColumns>Boolean default='false'</sortableColumns>
		<resizableColumns>Boolean default='false'</resizableColumns>
		<draggableColumns>Boolean default='false'</draggableColumns>
		<showHeaders>Boolean default='true'</showHeaders>
		<verticalGridLines>Boolean default='true' ... Whether vertical grid lines are shown</verticalGridLines>
		<selectable>Boolean default='false' ... </selectable>
		<editable>Boolean default='true' ... If this property is false, it doesn't matter whether the columns have editable=true or not</editable>
		<sendMessage>Boolean default='true' ... If the datagrid has a fid and sendMessage == true, then it will cause its record to be sent when a different ruid is selected</sendMessage>
		<rowCount>int ... the number of rows shown in the datagrid.</rowCount>
		<headerHeight>Number ... can use mm, e.g. '10mm'</headerHeight>
		<variableRowHeight>Boolean default='false' ... whether the individual rows can have different heights</variableRowHeight>
		<wordWrap>Boolean default='false' ... </wordWrap>
		<messageOnSelect>Boolean default='true' ... if true, a message is sent with the selected record when it is clicked</messageOnSelect>
		<fontFamily>String default='Verdana'</fontFamily>
		<fontSize>Number default='12'</fontSize>
		<fontWeight>String ... [normal|bold]</fontWeight>
		<color>String ... text color in hexadecimal format (e.g. 'ff0000' for red)</color>
		<SampleXML>
			<DataGrid>
				<columns>                              
					<DataGridColumn fid="fid1" type="checkBox" headerText="Sample1" width="50"/>
					<DataGridColumn fid="fid2" headerText="Sample2" editable="true" width="100"/> 
				</columns>
			</DataGrid>
		</SampleXML>
	</DataGrid_ISIS>
	
	
	
	
	<Canvas_X package="generics" label="Canvas" container="true" group="Gen_Containers">
		<ruid>String</ruid>
		<backgroundColor>String ... in hexadecimal format (e.g. 'ff0000' for red)</backgroundColor>
		<SampleXML>
			<Canvas width="100" height="100" backgroundColor="ff0000"/>
		</SampleXML>
	</Canvas_X>
	
	<HBox_X package="generics" label="HBox" container="true" group="Gen_Containers">
		<ruid>String</ruid>
		<backgroundColor>String ... in hexadecimal format (e.g. 'ff0000' for red)</backgroundColor>
		<horizontalGap>Number default='0' ... gap b/w components in the HBox</horizontalGap>
		<verticalAlign>String default='top' ... [top|middle|bottom]</verticalAlign>
		<SampleXML>
			<HBox width="100" height="100" backgroundColor="ff0000"/>
		</SampleXML>
	</HBox_X>
	
	<VBox_X package="generics" label="VBox" container="true" group="Gen_Containers">
		<ruid>String</ruid>
		<backgroundColor>String ... in hexadecimal format (e.g. 'ff0000' for red)</backgroundColor>
		<verticalGap>Number default='0' ... gap b/w components in the VBox</verticalGap>
		<horizontalAlign>String default='left' ... [left|center|right]</horizontalAlign>
		<SampleXML>
			<VBox width="100" height="100" backgroundColor="ff0000"/>
		</SampleXML>
	</VBox_X>
	
	<InfoTag_X package="generics" label="InfoTag" container="true" group="Gen_Containers">
		<ruid>String</ruid>
		<backgroundColor>String ... in hexadecimal format (e.g. 'ff0000' for red)</backgroundColor>
		<verticalGap>Number default='0' ... gap b/w components in the InfoTag</verticalGap>
		<horizontalAlign>String default='left' ... [left|center|right]</horizontalAlign>
		<SampleXML>
			<InfoTag/>
		</SampleXML>
	</InfoTag_X>
	
	<ResizingBoxContainer_X package="generics" label="ResizingBoxContainer" container="true" group="Gen_Containers">
		<ruid>String</ruid>
		<backgroundColor>String ... in hexadecimal format (e.g. 'ff0000' for red)</backgroundColor>
		<verticalGap>Number default='0' ... gap b/w components in the TitleBar</verticalGap>
		<horizontalAlign>String default='left' ... [left|center|right]</horizontalAlign>
		<SampleXML>
			<ResizingBoxContainer width="100" height="300" backgroundColor="0000ff"/>
		</SampleXML>
	</ResizingBoxContainer_X>
	
	<ResizingBox_X package="generics" label="ResizingBox" container="true" group="Gen_Containers">
		<ruid>String</ruid>
		<backgroundColor>String ... in hexadecimal format (e.g. 'ff0000' for red)</backgroundColor>
		<verticalGap>Number default='0' ... gap b/w components in the TitleBar</verticalGap>
		<horizontalAlign>String default='left' ... [left|center|right]</horizontalAlign>
		<expandedHeight>Number ... the height of this box when expanded</expandedHeight>
		<collapsedHeight>Number ... the height of this box when collapsed</collapsedHeight>
		<expanded>Boolean default='false' ... indicates whether the box is initially expanded or not.</expanded>
		<type>String default='left' ... [right|left] indicates which side the expand/collapse button is placed</type>
		<collapseIcon>String default='collapse' ... icon ID of the icon appearing on the button when clicking results in collapsing</collapseIcon>
		<expandIcon>String default='expand' ... icon ID of the icon appearing on the button when clicking results in expanding</expandIcon>
		<buttonSize>Number ... the length of the (square) button's sides</buttonSize>
		<SampleXML>
			<ResizingBox width="100" height="100" backgroundColor="ff0000"/>
		</SampleXML>
	</ResizingBox_X>
	
	<Spacer_X package="generics" label="Spacer" container="false" group="Gen_Layout">
		<SampleXML>
			<Spacer/>
		</SampleXML>
	</Spacer_X>
	
	<HRule_X package="generics" label="HRule" container="false" group="Gen_Layout">
		<SampleXML>
			<HRule/>
		</SampleXML>
	</HRule_X>

	<VRule_X package="generics" label="VRule" container="false" group="Gen_Layout">
		<SampleXML>
			<VRule/>
		</SampleXML>
	</VRule_X>
	
	
	<Label_X package="generics" label="Label" container="false" group="Gen_Display">
		<ruid>String</ruid>
		<fid>String</fid>
		<text>String ... text displayed.  NOTE This is NOT recommended for labels with a field, as the field value would always be replaced by the text, which may not be desirable. ISISRecord messages are recommended to change such values</text>
		<selectable>Boolean default='false' ... if true, user is allowed to select the text</selectable>
		<multiLine>Boolean default='false'</multiLine>
		<color>String ... color of the text in hexadecimal format (e.g. 'ff0000' for red)</color>
		<fontSize>Number default='12'</fontSize>
		<fontFamily>String default='Verdana'</fontFamily>
		<fontWeight>String default='normal'... [normal|bold]</fontWeight>
		<fontStyle>String default='normal'... [normal|italic]</fontStyle>
		<textAlign>String default='left' ... [left|center|right]</textAlign>
		<SampleXML>
			<Label text="Sample"/>
		</SampleXML>
	</Label_X>
	
	<LabelEnum_X package="generics" label="LabelEnum" container="false" group="Gen_Display">
		<ruid>String</ruid>
		<fid>String ... REQUIRED</fid>
		<enum>String ... pipe delimited enumeration of label texts.  Based on the order of the enumeration, the LabelEnum changes its text to match the enum text at the index specified by the field's.  (e.g. 'hello|how are you|goodbye' would display 'hello' if the field's value was '0' and 'goodbye' if it was '2'</enum>
		<selectable>Boolean default='false' ... if true, user is allowed to select the text</selectable>
		<color>String ... color of the text in hexadecimal format (e.g. 'ff0000' for red)</color>
		<fontSize>Number default='12'</fontSize>
		<fontFamily>String default='Verdana'</fontFamily>
		<fontWeight>String default='normal'... [normal|bold]</fontWeight>
		<fontStyle>String default='normal'... [normal|italic]</fontStyle>
		<textAlign>String default='left' ... [left|center|right]</textAlign>
		<SampleXML>
			<LabelEnum/>
		</SampleXML>
	</LabelEnum_X>
	
	<Icon_X package="generics" label="Icon" container="false" group="Gen_Display">
		<ruid>String</ruid>
		<fid>String</fid>
		<sendMessage>String ... if true, a message will be sent when the icon is clicked</sendMessage>
		<icon>String ... ID of the icon to be displayed.  Note that this should generally be used in exclusion to any skins listed below</icon>
		<sendMessage>Boolean default='false' ... if true, the icon causes a message to be sent when clicked just like a Button.</sendMessage>
		<states>String ... pipe delimited strings that are expected to match up with the field's value.  e.g. the string 'paperPoints|selection|moving' would make it so that the icon component displayed the paperPoints icon when its field's value was 0 or the selection icon when the value was 1, etc.</states>
		<upSkin>String ... ID of the icon to be displayed in this state.  Note that this should generally be used in exclusion to the 'states' above.</upSkin>
		<overSkin>String ... ID of the icon to be displayed in this state.  Note that this should generally be used in exclusion to the 'states' above.</overSkin>
		<downSkin>String ... ID of the icon to be displayed in this state.  Note that this should generally be used in exclusion to the 'states' above.</downSkin>
		<selectedDownSkin>String ... ID of the icon to be displayed in this state.  Note that this should generally be used in exclusion to the 'states' above.</selectedDownSkin>
		<selectedUpSkin>String ... ID of the icon to be displayed in this state.  Note that this should generally be used in exclusion to the 'states' above.</selectedUpSkin>
		<selectedOverSkin>String ... ID of the icon to be displayed in this state.  Note that this should generally be used in exclusion to the 'states' above.</selectedOverSkin>
		<disabledSkin>String ... ID of the icon to be displayed in this state.  Note that this should generally be used in exclusion to the 'states' above.</disabledSkin>
		<selectedDisabledSkin>String ... ID of the icon to be displayed in this state.  Note that this should generally be used in exclusion to the 'states' above.</selectedDisabledSkin>
		<SampleXML>
			<Icon width="10mm" height="10mm" icon="skull"/>
		</SampleXML>
	</Icon_X>
	
	<Compass_X package="generics" label="Compass" container="false" group="Gen_Display">
		<ruid>String</ruid>
		<SampleXML>
			<Compass ruid="SAMPLE">
				<field fid="fid1" name="magNorth"/>
			</Compass>
		</SampleXML>
	</Compass_X>
	
	<Dial_X package="generics" label="Dial" container="false" group="Gen_Display">
		<ruid>String</ruid>
		<innerRadDeltaValue>Number ... </innerRadDeltaValue>
		<type>String ... [fixed|rotating|floating].  fixed = outer circle (with degree markers) never rotates. rotating = main dial is fixed at the top (the outer circle rotates).  floating = both the outer circle and the dial rotate with respect to the field named 'floatReference'.</type>
		<SampleXML>
			<Dial ruid="SAMPLE">
				<field fid="fid1" name="currentDir"/>
				<field fid="fid2" name="commandedDir"/>
				<field fid="fid3" name="plannedDir"/>
				<field fid="fid4" name="okZoneLowerLimit"/>
				<field fid="fid5" name="okZoneUpperLimit"/>
				<field fid="fid6" name="priorityZoneLowerLimit"/>
				<field fid="fid7" name="priorityZoneUpperLimit"/>
				<field fid="fid8" name="critZoneLowerLimit"/>
				<field fid="fid9" name="critZoneUpperLimit"/>
				<field fid="fid10" name="track" value="Temperature"/>
				<field fid="fid11" name="units" value="Kelvin"/>
			</Dial>
		</SampleXML>
	</Dial_X>
	
	<MaxStatus_X package="generics" label="MaxStatus" container="false" group="Gen_Display">
		<ruid>String</ruid> 
		<horizontalPos>Boolean default='true' ... if false, the indicator runs vertically with 0 indicating the bottom</horizontalPos>
		<SampleXML>
			<MaxStatus ruid="SAMPLE">
				<field fid="fid1" name="current"/>
				<field fid="fid2" name="maxCrit"/>
			</MaxStatus>
		</SampleXML>
	</MaxStatus_X>
	
	<SliderDisplay_X package="generics" label="SliderDisplay" container="false" group="Gen_Display">
		<ruid>String</ruid>
		<horizontalPos>Boolean default='true' ... if false, makes this a vertical gauge with identical properties made from the dimensions as if it were horizontal then rotated</horizontalPos>
		<tickLeftOrTop>Boolean</tickLeftOrTop>
		<division>Number ... distance b/w tick marks</division>
		<type>String ... [mast|volume].  Both types may be either horizontal or vertical.  When vertical, 0 value is at the bot and when horizontal, 0 value is at the left.  mast = mast gauge.  volume = volume indicator.</type>
		<SampleXML>
			<SliderDisplay ruid="SAMPLE">
				<field fid="fid1" name="commanded"/>
				<field fid="fid2" name="actual"/>
			</SliderDisplay>
		</SampleXML>
	</SliderDisplay_X>
	
	<TurnRateIndicator_X package="generics" label="TurnRateIndicator" container="false" group="Gen_Display">
		<ruid>String</ruid>
		<SampleXML>
			<TurnRateIndicator ruid="SAMPLE">
				<field fid="fid1" name="turnRate"/>
			</TurnRateIndicator>
		</SampleXML>
	</TurnRateIndicator_X>
	
	<RateInstrument_X package="generics" label="RateInstrument" container="false" group="Gen_Display">
		<ruid>String</ruid>
		<min>Number</min>
		<max>Number</max>
		<division>Number</division>
		<SampleXML>
			<RateInstrument ruid="SAMPLE">
				<field fid="fid1" name="actual"/>
			</RateInstrument>
		</SampleXML>
	</RateInstrument_X>
	
	<VoltageIndicator_X package="generics" label="VoltageIndicator" container="false" group="Gen_Display">
		<ruid>String</ruid>
		<units>String ... </units>
		<ringColor>String ... in hexadecimal format (e.g. 'ff0000' for red)</ringColor>
		<SampleXML>
			<VoltageIndicator ruid="SAMPLE">
				<field fid="fid1" name="currentVolt"/>
				<field fid="fid2" name="critVoltLimit"/>
			</VoltageIndicator>
		</SampleXML>
	</VoltageIndicator_X>
	
	<Volume_X package="generics" label="Volume" container="false" group="Gen_Display">
		<ruid>String</ruid>
		<SampleXML>
			<Volume ruid="SAMPLE">
				<field fid="fid1" name="actual"/>
			</Volume>
		</SampleXML>
	</Volume_X>
	
	<Video_X package="generics" label="Video" container="false" group="Gen_Display">
		<ruid>String</ruid>
		<SampleXML>
			<Video ruid="SAMPLE" luid="videoLuid">
				<field fid="fid1" name="host"/>
				<field fid="fid2" name="port"/>
				<field fid="fid3" name="cameraMove"/>
			</Video>
		</SampleXML>
	</Video_X>

	<ImageViewer_X package="generics" label="ImageViewer" container="false" group="Gen_Display">
		<ruid>String</ruid>
		<SampleXML>
			<ImageViewer luid="imageViewer_1" ruid="imageViewer_1" width="56mm" height="43mm">
				<field name="host" fid="host_fid" value="localhost"/>
				<field name="port" fid="port_fid" value="12202"/>
			</ImageViewer>
		</SampleXML>
	</ImageViewer_X>
	
	
	<!--
	<_X package="generics" label="" container="false">
		<SampleXML>
			</>
		</SampleXML>
	</_X>
	-->
	
	<ShapeShifter package="generics" label="ShapeShifter" container="false" group="Gen_Display">
		<SampleXML>
			<ShapeShifter/>
		</SampleXML>
	</ShapeShifter>
</ClassDefinitions>