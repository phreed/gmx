<?xml version="1.0" encoding="utf-8"?>
<!--
/*
 *      Copyright (c) Vanderbilt University, 2006-2009
 *      ALL RIGHTS RESERVED, UNLESS OTHERWISE STATED
 *
 *      Developed under contract for Future Combat Systems (FCS)
 *      by the Institute for Software Integrated Systems, Vanderbilt Univ.
 *
 *      Export Controlled:  Not Releasable to a Foreign Person or
 *      Representative of a Foreign Interest
 *
 *      GOVERNMENT PURPOSE RIGHTS:
 *      The Government is granted Government Purpose Rights to this
 *      Data or Software.  Use, duplication, or disclosure is subject
 *      to the restrictions as stated in Agreement DAAE07-03-9-F001
 *      between The Boeing Company and the Government.
 *
 *      Vanderbilt University disclaims all warranties with regard to this
 *      software, including all implied warranties of merchantability
 *      and fitness.  In no event shall Vanderbilt University be liable for
 *      any special, indirect or consequential damages or any damages
 *      whatsoever resulting from loss of use, data or profits, whether
 *      in an action of contract, negligence or other tortious action,
 *      arising out of or in connection with the use or performance of
 *      this software.
 * 
 */-->
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" horizontalGap="2"
   width="50" height="100%" horizontalAlign="center" verticalAlign="middle" horizontalScrollPolicy="off">
  <mx:Script>
   <![CDATA[
	import records.Record;
   	import constants.Size;
   	import generics.CheckBox_X;
   	import records.Field;
   	import mx.controls.Alert;
	import mx.containers.HBox;
	import mx.core.Container;
		private var _data:Object = new Object;
		//private static const KEY:String = "rating";
		public var fid:String = "";
		//private var level:int = 0;
     
		private var _checkBox:CheckBox_X;
	
		override protected function createChildren():void {
			super.createChildren();
			//this.setStyle("horizontalAlign", "center");
			//this.width = 
			_checkBox = new CheckBox_X();
			_checkBox.selected = false;
			_checkBox.enabled = this.enabled;
			
			this.addChild(_checkBox);
			//_checkBox.removeEventListener(MouseEvent.MOUSE_DOWN, _checkBox.mouseClick); // remove so it doesn't double change
			_checkBox.dataGridComponent = true;
			_checkBox.addEventListener(MouseEvent.MOUSE_DOWN, clicked, false, 0, true);
			var MM:Number = Size.MM;
			_checkBox.height = 8.0 * MM; // fit it correctly into a datagrid spot
			//_checkBox.addEventListener(MouseEvent.CLICK, handleExpandClick);
		}
     
     	public function clicked(event:MouseEvent):void {
     		if (this.enabled == false) { return; }
     		
     		_data[fid] == "false" ? _data[fid] = "true" : _data[fid] = "false";
     		trace("DATA: " + _data + "\n");
     		var tableRecord:Record = GMXDictionaries.getRuid(_data.@ruid.toString());
     		if (tableRecord == null) {
				Alert.show("WARNING: attempted to update a Table Record, but the record id '" + data.TableRecord.@ruid.toString() + "' did not match a TableRecord in the dictionary.");
				return;
			}
     		var field:Field = tableRecord.getField(fid) as Field;
     		if (field == null) {
     			Alert.show("Field '" + fid + "' does not exist in record with ruid '" + _data.@ruid.toString() + "'");
     			return;
     		}
			field.value = _data[fid];
			tableRecord.sendMessage();
     	}
		//public function set level(val:int):void {
		//	_data.levelInTreeDataGrid = val;
		//}
		
		//public function set show(val:Boolean):void {
		//	_data.showExpandButton = Boolean(val);
		//	trace("EXPAND BUTTON BEFORE: " + _data.showExpandButton + "   DATA: " + _data[fid]);
		//}
		
		public function get value():String { 
			//return _checkBox.componentValue;
			if (data != null) {
				return _data[fid];
			}
			return "";
		}
		
		public function get text():String {
			return this.value;
		}
	     
		override public function set data(value:Object):void {
			_data = value;
			var checkBoxState:String;
			//trace("From renderer: " + value.toString());
			if (fid != "") {
				checkBoxState = value[fid].toString();
				if (checkBoxState == "true") {
					_checkBox.selected = true;
				} else if (checkBoxState == "false") {
					_checkBox.selected = false;
				} else if (checkBoxState == "partial") {
					_checkBox.partial = true;
				}
			}
		}
     
		override public function get data():Object {
			return _data;
		}
     
		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {			
			//hBox.width = _data.levelInTreeDataGrid * 20;
			//trace("EXPAND BUTTON LATER: " + _data.showExpandButton + "   DATA: " + _data[fid]);
			
			super.updateDisplayList(unscaledWidth, unscaledHeight);
		}
     
		override public function invalidateDisplayList():void {
			super.invalidateDisplayList();
		}
		
		override protected function commitProperties():void {
			super.commitProperties();
		}
   ]]>
 </mx:Script>
</mx:HBox>
