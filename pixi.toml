[workspace]
authors = ["Fredrick Eisele <fred.eisele@vanderbilt.edu>"]
channels = ["https://prefix.dev/meso-forge", "conda-forge"]
name = "gmx"
platforms = ["linux-64", "osx-64", "win-64", "osx-arm64"]
version = "0.1.0"

[dependencies]
# Core dependencies for building and running GMX
python = ">=3.8"
# Build tools
cmake = "*"
make = "*"
git = "*"
pkg-config = "*"
# HashLink build dependencies - using available conda-forge packages
libpng = "*"
sqlite = "*"
# Note: curl, unzip should be available as system tools

[pypi-dependencies]
# Python tools for server examples
requests = "*"

[tasks]

# =============================================================================
# Setup and Installation Tasks
# =============================================================================

[tasks.setup]
description = "Complete setup of GMX development environment"
depends-on = [
    "install-haxe",
    "install-hashlink",
    "install-libs",
    "setup-directories",
]

[tasks.install-haxe]
cmd = """
bash -c '
set -e

HAXE_VERSION="5.0.0-preview.1"
INSTALL_DIR="$HOME/.local"
BIN_DIR="$INSTALL_DIR/bin"
HAXE_DIR="$INSTALL_DIR/haxe"

# Create directories
mkdir -p "$BIN_DIR"
mkdir -p "$HAXE_DIR"

# Check if already installed
if [ -f "$BIN_DIR/haxe" ] && [ -f "$BIN_DIR/haxelib" ]; then
    CURRENT_VERSION=$("$BIN_DIR/haxe" --version 2>/dev/null || echo "unknown")
    if [ "$CURRENT_VERSION" = "$HAXE_VERSION" ]; then
        echo "‚úÖ Haxe $HAXE_VERSION already installed in $BIN_DIR"
        exit 0
    fi
fi

echo "üì• Installing Haxe $HAXE_VERSION to $INSTALL_DIR..."

# Check for required tools
if ! command -v curl &> /dev/null; then
    echo "‚ùå curl is required but not found. Please install curl first."
    exit 1
fi

if ! command -v tar &> /dev/null; then
    echo "‚ùå tar is required but not found. Please install tar first."
    exit 1
fi

# Download and install Haxe
cd "$HAXE_DIR"
HAXE_URL="https://github.com/HaxeFoundation/haxe/releases/download/5.0.0-preview.1/haxe-5.0.0-preview.1-linux64.tar.gz"

echo "Downloading Haxe from $HAXE_URL..."
curl -L -o haxe.tar.gz "$HAXE_URL"

echo "Extracting Haxe..."
tar -xzf haxe.tar.gz --strip-components=1
rm haxe.tar.gz

# Create symlinks in ~/.local/bin
ln -sf "$HAXE_DIR/haxe" "$BIN_DIR/haxe"
ln -sf "$HAXE_DIR/haxelib" "$BIN_DIR/haxelib"

# Ensure ~/.local/bin is in PATH
echo ""
echo "‚úÖ Haxe installed successfully!"
echo "üìç Location: $HAXE_DIR"
echo "üîó Symlinks: $BIN_DIR/haxe, $BIN_DIR/haxelib"
echo ""
echo "‚ö†Ô∏è  Make sure ~/.local/bin is in your PATH:"
echo '   export PATH="$HOME/.local/bin:$PATH"'
echo ""

# Verify installation
"$BIN_DIR/haxe" --version
'
"""
description = "Install Haxe compiler to ~/.local/bin"

[tasks.check-haxe]
cmd = """
bash -c '
export PATH="$HOME/.local/bin:$HOME/bin:$PATH"
export LD_LIBRARY_PATH="$HOME/bin/neko-2.3.0-linux64:$HOME/bin:$LD_LIBRARY_PATH"
export NEKOPATH="$HOME/bin/neko-2.3.0-linux64"
if ! command -v haxe &> /dev/null; then
    echo "‚ùå Haxe not found in PATH. Please run: pixi run install-haxe"
    echo "Expected locations: ~/.local/bin/haxe or ~/bin/haxe"
    exit 1
fi

HAXE_VERSION=$(haxe --version)
echo "‚úÖ Found Haxe: $HAXE_VERSION"

if ! command -v haxelib &> /dev/null; then
    echo "‚ùå haxelib not found in PATH"
    exit 1
fi

echo "‚úÖ Found haxelib"
'
"""
description = "Check that Haxe is installed in system PATH"

[tasks.install-hashlink]
cmd = """
bash -c '
set -e
HL_VERSION="1.15"
HL_DIR="$HOME/.local"
HL_SRC_DIR="$HOME/.local/src/hashlink"
HL_BIN="$HL_DIR/bin/hl"

# Check if already installed
if [ -f "$HL_BIN" ]; then
    echo "‚úÖ HashLink already installed at $HL_BIN"
    exit 0
fi

echo "üì• Installing HashLink $HL_VERSION from source to $HL_DIR..."

# Create directories
mkdir -p "$HL_DIR/bin" "$HL_DIR/lib" "$HL_DIR/include"
mkdir -p "$HOME/.local/src"

# Clone HashLink source
if [ ! -d "$HL_SRC_DIR" ]; then
    echo "Cloning HashLink source..."
    git clone https://github.com/HaxeFoundation/hashlink.git "$HL_SRC_DIR" --depth 1 --branch $HL_VERSION
fi

cd "$HL_SRC_DIR"

# Build HashLink with minimal dependencies (core only)
echo "Building HashLink (core components only)..."
# Build only the core hashlink without optional libraries
make hl PREFIX="$HL_DIR"

# Install HashLink
echo "Installing HashLink to $HL_DIR..."
mkdir -p "$HL_DIR/bin" "$HL_DIR/lib"
cp hl "$HL_DIR/bin/"
cp libhl.so "$HL_DIR/lib/" 2>/dev/null || cp libhl.dylib "$HL_DIR/lib/" 2>/dev/null || true

echo "‚úÖ HashLink $HL_VERSION installed successfully!"
echo "üìç Location: $HL_DIR"
echo "üîß Binary: $HL_BIN"
echo ""
echo "‚ö†Ô∏è  Make sure ~/.local/bin is in your PATH:"
echo "   export PATH=\"$HOME/.local/bin:$PATH\""
echo ""

# Verify installation
"$HL_BIN" --version
'
"""
description = "Install HashLink runtime"

[tasks.install-libs]
description = "Install Haxe libraries"
depends-on = ["check-haxe"]
cmd = """
bash -c '
export PATH="$HOME/.local/bin:$HOME/bin:$PATH"
export LD_LIBRARY_PATH="$HOME/bin/neko-2.3.0-linux64:$HOME/bin:$LD_LIBRARY_PATH"
export NEKOPATH="$HOME/bin/neko-2.3.0-linux64"
echo "Installing Haxe libraries..."

# Create haxelib setup directory in standard location
mkdir -p "$HOME/.local/share/haxe/lib"
echo "$HOME/.local/share/haxe/lib" > "$HOME/.haxelib"

# Install required libraries
haxelib install heaps --quiet
haxelib install hlsdl --quiet
haxelib install format --quiet

echo "Haxe libraries installed successfully"
'
"""

[tasks.setup-directories]
description = "Setup project directories"
cmd = """
bash -c '
cd "$PIXI_PROJECT_ROOT/haxe-port"
mkdir -p bin dist assets
echo "Project directories created"
'
"""

# =============================================================================
# Build Tasks
# =============================================================================

[tasks.build]
description = "Build GMX application (development)"
depends-on = ["build-dev"]

[tasks.build-dev]
description = "Build development version"
depends-on = ["check-haxe", "install-hashlink", "install-libs"]
cwd = "haxe"
cmd = """
bash -c '
export PATH="$HOME/.local/bin:$HOME/bin:$PATH"
export LD_LIBRARY_PATH="$HOME/bin/neko-2.3.0-linux64:$HOME/bin:$LD_LIBRARY_PATH"
export NEKOPATH="$HOME/bin/neko-2.3.0-linux64"

echo "Building GMX development version..."
haxe build.hxml

if [ $? -eq 0 ]; then
    echo "‚úÖ Development build completed: bin/gmx.hl"
else
    echo "‚ùå Development build failed"
    exit 1
fi
'
"""

[tasks.build-release]
description = "Build optimized release version"
depends-on = ["check-haxe", "install-hashlink", "install-libs"]
cwd = "haxe"
cmd = """
bash -c '
export PATH="$HOME/.local/bin:$HOME/bin:$PATH"
export LD_LIBRARY_PATH="$HOME/bin/neko-2.3.0-linux64:$HOME/bin:$LD_LIBRARY_PATH"
export NEKOPATH="$HOME/bin/neko-2.3.0-linux64"

echo "Building GMX release version..."
haxe build-release.hxml

if [ $? -eq 0 ]; then
    echo "‚úÖ Release build completed: bin/gmx.hl"
else
    echo "‚ùå Release build failed"
    exit 1
fi
'
"""

[tasks.clean]
description = "Clean build artifacts"
cwd = "haxe-port"
cmd = """
bash -c '
echo "Cleaning build artifacts..."
rm -rf bin/* dist/*
echo "‚úÖ Clean completed"
'
"""

[tasks.rebuild]
description = "Clean and rebuild"
depends-on = ["clean", "build"]

# =============================================================================
# Run and Test Tasks
# =============================================================================

[tasks.run]
description = "Build and run GMX application"
depends-on = ["build-dev"]
cwd = "haxe-port"
cmd = """
bash -c '
export PATH="$PIXI_PROJECT_ROOT/.hashlink:$PATH"

if [ ! -f "bin/gmx.hl" ]; then
    echo "‚ùå Build file not found. Run build first."
    exit 1
fi

echo "üöÄ Running GMX application..."
hl bin/gmx.hl
'
"""

[tasks.dev]
description = "Development mode: build and run with file watching"
depends-on = ["build-dev"]
cwd = "haxe"
cmd = """
bash -c '
export PATH="$HOME/.local/bin:$HOME/bin:$PIXI_PROJECT_ROOT/.hashlink:$PATH"
export LD_LIBRARY_PATH="$HOME/bin/neko-2.3.0-linux64:$HOME/bin:$LD_LIBRARY_PATH"
export NEKOPATH="$HOME/bin/neko-2.3.0-linux64"

echo "üîÑ Starting development mode..."
echo "Watching for changes in src/ directory..."

# Simple file watching with build and run
while true; do
    echo "Building and running..."
    haxe build.hxml && hl bin/gmx.hl
    echo ""
    echo "Press Enter to rebuild and run again, or Ctrl+C to exit..."
    read -r
done
'
"""

# =============================================================================
# Package Tasks
# =============================================================================

[tasks.package]
description = "Package for current platform"
depends-on = ["package-native"]

[tasks.package-native]
description = "Package native executable for current platform"
depends-on = ["build-release"]
cwd = "haxe-port"
cmd = """
bash -c '
export PATH="$PIXI_PROJECT_ROOT/.hashlink:$PATH"

if [ ! -f "bin/gmx.hl" ]; then
    echo "‚ùå Build file not found. Run build-release first."
    exit 1
fi

echo "üì¶ Packaging native executable..."
mkdir -p dist

case "$(uname -s)" in
    Linux*)
        hl --compile-hl bin/gmx.hl dist/gmx-linux
        chmod +x dist/gmx-linux
        echo "‚úÖ Linux package created: dist/gmx-linux"
        ;;
    Darwin*)
        hl --compile-hl bin/gmx.hl dist/gmx-macos
        chmod +x dist/gmx-macos
        echo "‚úÖ macOS package created: dist/gmx-macos"
        ;;
    CYGWIN*|MINGW*|MSYS*)
        hl --compile-hl bin/gmx.hl dist/gmx-windows.exe
        echo "‚úÖ Windows package created: dist/gmx-windows.exe"
        ;;
    *)
        echo "‚ùå Unsupported platform: $(uname -s)"
        exit 1
        ;;
esac
'
"""

[tasks.package-all]
description = "Package for all supported platforms"
depends-on = ["build-release"]
cwd = "haxe-port"
cmd = """
bash -c '
export PATH="$PIXI_PROJECT_ROOT/.hashlink:$PATH"

if [ ! -f "bin/gmx.hl" ]; then
    echo "‚ùå Build file not found. Run build-release first."
    exit 1
fi

echo "üì¶ Packaging for all platforms..."
mkdir -p dist

# Package for Linux
hl --compile-hl bin/gmx.hl dist/gmx-linux
chmod +x dist/gmx-linux
echo "‚úÖ Linux package created: dist/gmx-linux"

# Note: Cross-compilation for other platforms requires additional setup
echo "‚ÑπÔ∏è  For Windows/macOS packages, run this task on those platforms"
echo "‚úÖ Package-all completed"
'
"""

[tasks.package-flatpak]
description = "Package as Linux Flatpak"
depends-on = ["package-native"]
cwd = "haxe-port"
cmd = """
bash -c '
if [ ! -f "scripts/build-flatpak.sh" ]; then
    echo "‚ùå Flatpak build script not found"
    exit 1
fi

echo "üì¶ Building Flatpak package..."
./scripts/build-flatpak.sh all
echo "‚úÖ Flatpak package created"
'
"""

# =============================================================================
# Server Tasks
# =============================================================================

[tasks.start-layout-server]
description = "Start the example layout server"
cmd = """
bash -c '
cd "$PIXI_PROJECT_ROOT/examples/servers"
echo "üñ•Ô∏è  Starting layout server on localhost:12345..."
python layout_server.py --host localhost --port 12345
'
"""

[tasks.start-data-server]
description = "Start the example data server"
cmd = """
bash -c '
cd "$PIXI_PROJECT_ROOT/examples/servers"
echo "üíæ Starting data server on localhost:12346..."
python data_server.py --host localhost --port 12346
'
"""

[tasks.start-servers]
description = "Start both layout and data servers"
cmd = """
bash -c '
cd "$PIXI_PROJECT_ROOT/examples/servers"
echo "üöÄ Starting GMX servers..."

# Start layout server in background
echo "Starting layout server..."
python layout_server.py --host localhost --port 12345 &
LAYOUT_PID=$!

# Start data server in background
echo "Starting data server..."
python data_server.py --host localhost --port 12346 &
DATA_PID=$!

echo "üì° Layout server running on localhost:12345 (PID: $LAYOUT_PID)"
echo "üíæ Data server running on localhost:12346 (PID: $DATA_PID)"
echo ""
echo "Press Ctrl+C to stop both servers"

# Wait for Ctrl+C
trap "echo \"Stopping servers...\"; kill $LAYOUT_PID $DATA_PID; exit 0" INT
wait
'
"""

# =============================================================================
# Development and Testing Tasks
# =============================================================================

[tasks.test]
description = "Run tests (placeholder)"
cmd = """
bash -c '
echo "üß™ Running tests..."
echo "‚ö†Ô∏è  Test suite not yet implemented"
echo "‚úÖ Test task completed"
'
"""

[tasks.check]
description = "Check Haxe code compilation without building"
depends-on = ["check-haxe", "install-libs"]
cwd = "haxe"
cmd = """
bash -c '
export PATH="$HOME/.local/bin:$HOME/bin:$PATH"
export LD_LIBRARY_PATH="$HOME/bin/neko-2.3.0-linux64:$HOME/bin:$LD_LIBRARY_PATH"
export NEKOPATH="$HOME/bin/neko-2.3.0-linux64"

echo "üîç Checking Haxe code..."
haxe --no-output --main Main -cp src -lib heaps -lib hlsdl -lib format -hl /tmp/check.hl

if [ $? -eq 0 ]; then
    echo "‚úÖ Code check passed"
else
    echo "‚ùå Code check failed"
    exit 1
fi
'
"""

[tasks.docs]
description = "Generate documentation"
depends-on = ["check-haxe", "install-libs"]
cwd = "haxe"
cmd = """
bash -c '
export PATH="$HOME/.local/bin:$HOME/bin:$PATH"

echo "üìö Generating documentation..."
mkdir -p docs/api

haxe -cp src -lib heaps -lib hlsdl -lib format --main Main -xml docs/api/gmx.xml

if [ $? -eq 0 ]; then
    echo "‚úÖ Documentation generated: docs/api/gmx.xml"
else
    echo "‚ùå Documentation generation failed"
    exit 1
fi
'
"""

# =============================================================================
# Utility Tasks
# =============================================================================

[tasks.info]
description = "Show project information and status"
cmd = """
bash -c '
echo "üèóÔ∏è  GMX Project Information"
echo "=========================="
echo ""
echo "Project: GMX (Graphical Message eXchange)"
echo "Version: 0.1.0"
echo "Target:  Haxe/HashLink"
echo ""

echo "üìÅ Directories:"
echo "  Source: haxe/src"
echo "  Build:  haxe/bin"
echo "  Dist:   haxe/dist"
echo "  Examples: examples/"
echo ""

echo "üîß Tool Status:"
export PATH="$HOME/.local/bin:$HOME/bin:$PATH"
export LD_LIBRARY_PATH="$HOME/bin/neko-2.3.0-linux64:$HOME/bin:$LD_LIBRARY_PATH"
export NEKOPATH="$HOME/bin/neko-2.3.0-linux64"
if command -v haxe &> /dev/null; then
    echo "  ‚úÖ Haxe: $(haxe --version)"
else
    echo "  ‚ùå Haxe: Not found in PATH"
fi

if command -v "$PIXI_PROJECT_ROOT/.hashlink/hl" &> /dev/null; then
    echo "  ‚úÖ HashLink: Available"
else
    echo "  ‚ùå HashLink: Not installed"
fi

echo ""
echo "üì¶ Build Status:"
if [ -f "haxe/bin/gmx.hl" ]; then
    echo "  ‚úÖ GMX Binary: Available ($(stat -c%s \"haxe/bin/gmx.hl\" 2>/dev/null || stat -f%z \"haxe/bin/gmx.hl\" 2>/dev/null) bytes)"
else
    echo "  ‚ùå GMX Binary: Not built"
fi

echo ""
echo "üöÄ Quick Start:"
echo "  pixi run setup     # Initial setup"
echo "  pixi run build     # Build application"
echo "  pixi run run       # Run application"
echo "  pixi run dev       # Development mode"
echo ""
'
"""

[tasks.help]
description = "Show available tasks and usage"
cmd = """
bash -c '
echo "üéØ GMX Pixi Tasks"
echo "================"
echo ""
echo "üèóÔ∏è  Setup & Installation:"
echo "  setup              Complete development environment setup"
echo "  install-haxe       Install Haxe compiler"
echo "  install-hashlink   Install HashLink runtime"
echo "  install-libs       Install Haxe libraries"
echo ""
echo "üî® Building:"
echo "  build              Build development version"
echo "  build-dev          Build development version (explicit)"
echo "  build-release      Build optimized release version"
echo "  clean              Clean build artifacts"
echo "  rebuild            Clean and rebuild"
echo "  check              Check code compilation"
echo ""
echo "üöÄ Running:"
echo "  run                Build and run application"
echo "  dev                Development mode with file watching"
echo ""
echo "üì¶ Packaging:"
echo "  package            Package for current platform"
echo "  package-native     Package native executable"
echo "  package-all        Package for all platforms"
echo "  package-flatpak    Package as Linux Flatpak"
echo ""
echo "üñ•Ô∏è  Servers:"
echo "  start-layout-server  Start example layout server"
echo "  start-data-server    Start example data server"
echo "  start-servers        Start both servers"
echo ""
echo "üîß Development:"
echo "  test               Run tests"
echo "  docs               Generate documentation"
echo "  info               Show project information"
echo "  help               Show this help"
echo ""
echo "üìñ Examples:"
echo "  pixi run setup && pixi run build && pixi run run"
echo "  pixi run start-servers &"
echo "  pixi run dev"
echo ""
'
"""

# =============================================================================
# Aliases for common tasks
# =============================================================================

[tasks.install]
description = "Alias for setup"
depends-on = ["setup"]

[tasks.compile]
description = "Alias for build"
depends-on = ["build"]

[tasks.start]
description = "Alias for run"
depends-on = ["run"]
